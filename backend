// backend/config/database.js
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
});

module.exports = pool;

// backend/middleware/auth.js
const jwt = require('jsonwebtoken');

const authMiddleware = (req, res, next) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
      return res.status(401).json({ message: 'Authentication required' });
    }
    
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ message: 'Invalid token' });
  }
};

module.exports = authMiddleware;

// backend/controllers/authController.js
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const pool = require('../config/database');

exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    
    const userResult = await pool.query(
      'SELECT * FROM users WHERE email = $1',
      [email]
    );
    
    const user = userResult.rows[0];
    if (!user) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }
    
    const isValidPassword = await bcrypt.compare(password, user.password_hash);
    if (!isValidPassword) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }
    
    const token = jwt.sign(
      { userId: user.user_id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );
    
    res.json({ token, user: { id: user.user_id, email: user.email } });
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
};

// backend/controllers/jobController.js
exports.getJobs = async (req, res) => {
  try {
    const jobs = await pool.query(
      'SELECT * FROM job_applications WHERE user_id = $1',
      [req.user.userId]
    );
    res.json(jobs.rows);
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
};

exports.createJob = async (req, res) => {
  try {
    const {
      company_name,
      job_title,
      status,
      application_date,
      job_description,
      salary_range,
      job_location,
      remote_type,
      notes
    } = req.body;

    // Start transaction
    const client = await pool.connect();
    try {
      await client.query('BEGIN');
      
      // Insert or get company
      const companyResult = await client.query(
        'INSERT INTO companies (company_name) VALUES ($1) ON CONFLICT (company_name) DO UPDATE SET company_name = $1 RETURNING company_id',
        [company_name]
      );
      
      const company_id = companyResult.rows[0].company_id;
      
      // Insert job application
      const jobResult = await client.query(
        `INSERT INTO job_applications 
         (user_id, company_id, job_title, status_id, application_date, job_description, 
          salary_range, job_location, remote_type, notes)
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
         RETURNING *`,
        [req.user.userId, company_id, job_title, status, application_date,
         job_description, salary_range, job_location, remote_type, notes]
      );
      
      await client.query('COMMIT');
      res.status(201).json(jobResult.rows[0]);
    } catch (error) {
      await client.query('ROLLBACK');
      throw error;
    } finally {
      client.release();
    }
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
};
